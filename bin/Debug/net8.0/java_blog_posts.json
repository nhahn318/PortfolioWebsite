[
  {
    "title": "Java Fundamentals và Lập Trình Hướng Đối Tượng: Hướng Dẫn Toàn Diện",
    "content": "# Java Fundamentals và Lập Trình Hướng Đối Tượng: Hướng Dẫn Toàn Diện\n\n## Giới thiệu về Java\n\nJava là một ngôn ngữ lập trình mạnh mẽ, được thiết kế để có thể chạy trên bất kỳ nền tảng nào thông qua Java Virtual Machine (JVM). Được phát triển bởi Sun Microsystems vào năm 1995, Java đã trở thành một trong những ngôn ngữ lập trình phổ biến nhất thế giới.\n\n### Đặc điểm nổi bật của Java:\n\n1. **Write Once, Run Anywhere (WORA)**: Code Java có thể chạy trên bất kỳ hệ điều hành nào có JVM\n2. **Object-Oriented**: Hoàn toàn hướng đối tượng\n3. **Platform Independent**: Độc lập với nền tảng\n4. **Secure**: Có hệ thống bảo mật mạnh mẽ\n5. **Multithreaded**: Hỗ trợ đa luồng\n6. **Dynamic**: Có thể tải class động\n\n## Cú pháp cơ bản của Java\n\n### Cấu trúc chương trình Java cơ bản:\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n### Các kiểu dữ liệu cơ bản:\n\n1. **Primitive Types**:\n   - `byte` (8-bit): -128 đến 127\n   - `short` (16-bit): -32,768 đến 32,767\n   - `int` (32-bit): -2,147,483,648 đến 2,147,483,647\n   - `long` (64-bit): -9,223,372,036,854,775,808 đến 9,223,372,036,854,775,807\n   - `float` (32-bit): Số thực dấu phẩy động\n   - `double` (64-bit): Số thực dấu phẩy động chính xác cao\n   - `char` (16-bit): Ký tự Unicode\n   - `boolean`: true hoặc false\n\n2. **Reference Types**:\n   - Arrays\n   - Objects\n   - Strings\n\n### Biến và hằng số:\n\n```java\n// Khai báo biến\nint age = 25;\nString name = \"John\";\nfinal double PI = 3.14159; // Hằng số\n\n// Khai báo nhiều biến cùng lúc\nint x = 10, y = 20, z = 30;\n```\n\n## Lập trình hướng đối tượng trong Java\n\n### 1. Class và Object\n\n**Class** là blueprint (bản thiết kế) để tạo ra các object. **Object** là instance (thể hiện) của class.\n\n```java\n// Định nghĩa class\npublic class Car {\n    // Thuộc tính (Attributes)\n    private String brand;\n    private String model;\n    private int year;\n    private double price;\n    \n    // Constructor\n    public Car(String brand, String model, int year, double price) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n        this.price = price;\n    }\n    \n    // Phương thức (Methods)\n    public void start() {\n        System.out.println(\"Car is starting...\");\n    }\n    \n    public void stop() {\n        System.out.println(\"Car is stopping...\");\n    }\n    \n    // Getter và Setter\n    public String getBrand() { return brand; }\n    public void setBrand(String brand) { this.brand = brand; }\n    \n    public String getModel() { return model; }\n    public void setModel(String model) { this.model = model; }\n    \n    public int getYear() { return year; }\n    public void setYear(int year) { this.year = year; }\n    \n    public double getPrice() { return price; }\n    public void setPrice(double price) { this.price = price; }\n}\n\n// Sử dụng class\npublic class Main {\n    public static void main(String[] args) {\n        // Tạo object\n        Car myCar = new Car(\"Toyota\", \"Camry\", 2023, 25000.0);\n        \n        // Gọi phương thức\n        myCar.start();\n        myCar.stop();\n        \n        // Truy cập thuộc tính thông qua getter\n        System.out.println(\"Brand: \" + myCar.getBrand());\n        System.out.println(\"Model: \" + myCar.getModel());\n    }\n}\n```\n\n### 2. Encapsulation (Đóng gói)\n\nEncapsulation là việc ẩn dấu dữ liệu bên trong class và chỉ cho phép truy cập thông qua các phương thức công khai.\n\n```java\npublic class BankAccount {\n    private double balance; // Thuộc tính private\n    private String accountNumber;\n    \n    public BankAccount(String accountNumber, double initialBalance) {\n        this.accountNumber = accountNumber;\n        this.balance = initialBalance;\n    }\n    \n    // Phương thức công khai để truy cập balance\n    public double getBalance() {\n        return balance;\n    }\n    \n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Deposited: \" + amount);\n        } else {\n            System.out.println(\"Invalid amount\");\n        }\n    }\n    \n    public boolean withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println(\"Withdrawn: \" + amount);\n            return true;\n        } else {\n            System.out.println(\"Insufficient funds or invalid amount\");\n            return false;\n        }\n    }\n}\n```\n\n### 3. Inheritance (Kế thừa)\n\nInheritance cho phép một class kế thừa các thuộc tính và phương thức từ class khác.\n\n```java\n// Parent class (Superclass)\npublic class Animal {\n    protected String name;\n    protected int age;\n    \n    public Animal(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public void eat() {\n        System.out.println(name + \" is eating\");\n    }\n    \n    public void sleep() {\n        System.out.println(name + \" is sleeping\");\n    }\n    \n    public void makeSound() {\n        System.out.println(name + \" makes a sound\");\n    }\n}\n\n// Child class (Subclass)\npublic class Dog extends Animal {\n    private String breed;\n    \n    public Dog(String name, int age, String breed) {\n        super(name, age); // Gọi constructor của parent class\n        this.breed = breed;\n    }\n    \n    @Override\n    public void makeSound() {\n        System.out.println(name + \" barks\");\n    }\n    \n    public void wagTail() {\n        System.out.println(name + \" is wagging tail\");\n    }\n    \n    public String getBreed() { return breed; }\n}\n\n// Sử dụng inheritance\npublic class Main {\n    public static void main(String[] args) {\n        Dog myDog = new Dog(\"Buddy\", 3, \"Golden Retriever\");\n        myDog.eat();        // Kế thừa từ Animal\n        myDog.sleep();      // Kế thừa từ Animal\n        myDog.makeSound();  // Override từ Animal\n        myDog.wagTail();    // Phương thức riêng của Dog\n    }\n}\n```\n\n### 4. Polymorphism (Đa hình)\n\nPolymorphism cho phép các object khác nhau phản ứng khác nhau với cùng một message.\n\n```java\n// Abstract class\npublic abstract class Shape {\n    protected String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    // Abstract method - phải được implement bởi subclass\n    public abstract double getArea();\n    public abstract double getPerimeter();\n    \n    public void displayInfo() {\n        System.out.println(\"Color: \" + color);\n        System.out.println(\"Area: \" + getArea());\n        System.out.println(\"Perimeter: \" + getPerimeter());\n    }\n}\n\n// Concrete classes\npublic class Circle extends Shape {\n    private double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    @Override\n    public double getArea() {\n        return Math.PI * radius * radius;\n    }\n    \n    @Override\n    public double getPerimeter() {\n        return 2 * Math.PI * radius;\n    }\n}\n\npublic class Rectangle extends Shape {\n    private double width, height;\n    \n    public Rectangle(String color, double width, double height) {\n        super(color);\n        this.width = width;\n        this.height = height;\n    }\n    \n    @Override\n    public double getArea() {\n        return width * height;\n    }\n    \n    @Override\n    public double getPerimeter() {\n        return 2 * (width + height);\n    }\n}\n\n// Polymorphism in action\npublic class Main {\n    public static void main(String[] args) {\n        Shape[] shapes = {\n            new Circle(\"Red\", 5.0),\n            new Rectangle(\"Blue\", 4.0, 6.0),\n            new Circle(\"Green\", 3.0)\n        };\n        \n        for (Shape shape : shapes) {\n            shape.displayInfo(); // Polymorphism - mỗi shape có cách tính khác nhau\n            System.out.println(\"---\");\n        }\n    }\n}\n```\n\n### 5. Abstraction (Trừu tượng hóa)\n\nAbstraction ẩn đi các chi tiết phức tạp và chỉ hiển thị những gì cần thiết.\n\n```java\n// Interface - định nghĩa contract\npublic interface Drawable {\n    void draw();\n    void setColor(String color);\n}\n\npublic interface Movable {\n    void move(int x, int y);\n    void stop();\n}\n\n// Class implement interface\npublic class Circle implements Drawable, Movable {\n    private String color;\n    private int x, y;\n    private double radius;\n    \n    public Circle(double radius) {\n        this.radius = radius;\n        this.x = 0;\n        this.y = 0;\n    }\n    \n    @Override\n    public void draw() {\n        System.out.println(\"Drawing circle at (\" + x + \", \" + y + \") with radius \" + radius);\n    }\n    \n    @Override\n    public void setColor(String color) {\n        this.color = color;\n        System.out.println(\"Circle color set to: \" + color);\n    }\n    \n    @Override\n    public void move(int x, int y) {\n        this.x = x;\n        this.y = y;\n        System.out.println(\"Circle moved to (\" + x + \", \" + y + \")\");\n    }\n    \n    @Override\n    public void stop() {\n        System.out.println(\"Circle stopped at (\" + x + \", \" + y + \")\");\n    }\n}\n```\n\n## Các khái niệm nâng cao\n\n### 1. Static Members\n\n```java\npublic class MathUtils {\n    // Static variable - thuộc về class, không thuộc về instance\n    public static final double PI = 3.14159;\n    private static int instanceCount = 0;\n    \n    // Static block - chạy khi class được load lần đầu\n    static {\n        System.out.println(\"MathUtils class loaded\");\n    }\n    \n    public MathUtils() {\n        instanceCount++;\n    }\n    \n    // Static method - có thể gọi mà không cần tạo instance\n    public static double calculateCircleArea(double radius) {\n        return PI * radius * radius;\n    }\n    \n    public static int getInstanceCount() {\n        return instanceCount;\n    }\n}\n\n// Sử dụng static members\npublic class Main {\n    public static void main(String[] args) {\n        // Gọi static method mà không cần tạo instance\n        double area = MathUtils.calculateCircleArea(5.0);\n        System.out.println(\"Area: \" + area);\n        \n        // Tạo instances để test instance count\n        new MathUtils();\n        new MathUtils();\n        System.out.println(\"Instance count: \" + MathUtils.getInstanceCount());\n    }\n}\n```\n\n### 2. Exception Handling\n\n```java\npublic class Calculator {\n    public static double divide(double a, double b) throws ArithmeticException {\n        if (b == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed\");\n        }\n        return a / b;\n    }\n    \n    public static void main(String[] args) {\n        try {\n            double result = divide(10, 0);\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        } finally {\n            System.out.println(\"This block always executes\");\n        }\n    }\n}\n```\n\n### 3. Generics\n\n```java\n// Generic class\npublic class Box<T> {\n    private T content;\n    \n    public void setContent(T content) {\n        this.content = content;\n    }\n    \n    public T getContent() {\n        return content;\n    }\n}\n\n// Generic method\npublic class ArrayUtils {\n    public static <T> void printArray(T[] array) {\n        for (T element : array) {\n            System.out.print(element + \" \");\n        }\n        System.out.println();\n    }\n}\n\n// Sử dụng generics\npublic class Main {\n    public static void main(String[] args) {\n        // Box cho Integer\n        Box<Integer> intBox = new Box<>();\n        intBox.setContent(42);\n        System.out.println(\"Integer box: \" + intBox.getContent());\n        \n        // Box cho String\n        Box<String> stringBox = new Box<>();\n        stringBox.setContent(\"Hello World\");\n        System.out.println(\"String box: \" + stringBox.getContent());\n        \n        // Generic method\n        Integer[] intArray = {1, 2, 3, 4, 5};\n        String[] stringArray = {\"Hello\", \"World\", \"Java\"};\n        \n        ArrayUtils.printArray(intArray);\n        ArrayUtils.printArray(stringArray);\n    }\n}\n```\n\n## Best Practices trong Java\n\n### 1. Naming Conventions\n- **Class names**: PascalCase (MyClass)\n- **Method names**: camelCase (myMethod)\n- **Variable names**: camelCase (myVariable)\n- **Constants**: UPPER_SNAKE_CASE (MAX_SIZE)\n- **Package names**: lowercase (com.example.mypackage)\n\n### 2. Code Organization\n```java\npackage com.example.vehicle;\n\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * Represents a vehicle in the system\n * @author Your Name\n * @version 1.0\n */\npublic class Vehicle {\n    // Constants\n    private static final int MAX_SPEED = 200;\n    \n    // Fields\n    private String make;\n    private String model;\n    private int year;\n    \n    // Constructors\n    public Vehicle() {}\n    \n    public Vehicle(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n    \n    // Getters and Setters\n    public String getMake() { return make; }\n    public void setMake(String make) { this.make = make; }\n    \n    // Methods\n    public void start() {\n        System.out.println(\"Vehicle started\");\n    }\n}\n```\n\n### 3. Documentation\n```java\n/**\n * Calculates the area of a circle\n * @param radius the radius of the circle\n * @return the area of the circle\n * @throws IllegalArgumentException if radius is negative\n */\npublic static double calculateCircleArea(double radius) {\n    if (radius < 0) {\n        throw new IllegalArgumentException(\"Radius cannot be negative\");\n    }\n    return Math.PI * radius * radius;\n}\n```\n\n## Kết luận\n\nJava là một ngôn ngữ lập trình mạnh mẽ với hệ thống OOP hoàn chỉnh. Việc hiểu rõ các khái niệm cơ bản như class, object, inheritance, polymorphism, và encapsulation là nền tảng quan trọng để phát triển các ứng dụng Java phức tạp.\n\nNhững kiến thức này sẽ giúp bạn:\n- Viết code Java sạch và dễ bảo trì\n- Hiểu được cách thiết kế hệ thống hướng đối tượng\n- Áp dụng các design patterns hiệu quả\n- Phát triển các ứng dụng enterprise-scale\n\nHãy tiếp tục học tập và thực hành để nắm vững Java và trở thành một Java developer chuyên nghiệp!",
    "excerpt": "Khám phá những kiến thức cơ bản và nâng cao về Java, từ cú pháp cơ bản đến lập trình hướng đối tượng. Hướng dẫn toàn diện với ví dụ thực tế và best practices.",
    "author": "TRAN NHAN",
    "category": "Java",
    "tags": ["Java", "OOP", "Programming", "Fundamentals"],
    "featuredImageUrl": "",
    "isPublished": true
  }
]
