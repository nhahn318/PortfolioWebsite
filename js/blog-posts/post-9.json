{
  "id": 9,
    "title": "Exception Handling trong Java",
    "excerpt": "Tìm hiểu về xử lý ngoại lệ trong Java: try-catch-finally, các loại exception, tạo custom exception và best practices.",
    "content": "<h2>Exception Handling trong Java</h2><p>Exception (ngoại lệ) là các tình huống bất thường xảy ra trong quá trình thực thi chương trình. Java cung cấp cơ chế xử lý exception mạnh mẽ để đảm bảo chương trình hoạt động ổn định.</p><h3>1. Khái niệm Exception</h3><h4>Phân loại Exception:</h4><ul><li><strong>Checked Exception:</strong> Phải xử lý (IOException, SQLException)</li><li><strong>Unchecked Exception:</strong> Không bắt buộc xử lý (RuntimeException)</li><li><strong>Error:</strong> Lỗi nghiêm trọng (OutOfMemoryError, StackOverflowError)</li></ul><h4>Hierarchy Exception:</h4><pre><code>Throwable\n├── Error (không nên catch)\n│   ├── OutOfMemoryError\n│   └── StackOverflowError\n└── Exception\n    ├── RuntimeException (Unchecked)\n    │   ├── NullPointerException\n    │   ├── ArrayIndexOutOfBoundsException\n    │   └── IllegalArgumentException\n    └── Checked Exceptions\n        ├── IOException\n        ├── SQLException\n        └── ClassNotFoundException</code></pre><h3>2. Try-Catch-Finally</h3><h4>Cú pháp cơ bản:</h4><pre><code>try {\n    // Code có thể gây exception\n} catch (ExceptionType e) {\n    // Xử lý exception\n} finally {\n    // Code luôn thực hiện\n}</code></pre><h4>Ví dụ thực tế:</h4><pre><code>import java.util.Scanner;\n\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        try {\n            System.out.print(\"Nhập số thứ nhất: \");\n            int a = scanner.nextInt();\n            \n            System.out.print(\"Nhập số thứ hai: \");\n            int b = scanner.nextInt();\n            \n            // Phép chia có thể gây ArithmeticException\n            double result = divide(a, b);\n            System.out.println(\"Kết quả: \" + result);\n            \n        } catch (ArithmeticException e) {\n            System.out.println(\"Lỗi: Không thể chia cho 0!\");\n        } catch (Exception e) {\n            System.out.println(\"Lỗi không xác định: \" + e.getMessage());\n        } finally {\n            System.out.println(\"Chương trình kết thúc.\");\n            scanner.close();\n        }\n    }\n    \n    public static double divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Chia cho 0 không được phép!\");\n        }\n        return (double) a / b;\n    }\n}</code></pre><h3>3. Multiple Catch Blocks</h3><pre><code>public class MultipleCatchExample {\n    public static void main(String[] args) {\n        try {\n            // Có thể gây nhiều loại exception\n            String[] array = {\"Hello\", \"World\"};\n            int index = 2; // Index không hợp lệ\n            \n            String value = array[index]; // ArrayIndexOutOfBoundsException\n            int length = value.length();\n            \n            // Giả sử có null\n            String nullString = null;\n            int nullLength = nullString.length(); // NullPointerException\n            \n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Lỗi: Chỉ số mảng không hợp lệ!\");\n            System.out.println(\"Chi tiết: \" + e.getMessage());\n            \n        } catch (NullPointerException e) {\n            System.out.println(\"Lỗi: Tham chiếu null!\");\n            System.out.println(\"Chi tiết: \" + e.getMessage());\n            \n        } catch (Exception e) {\n            System.out.println(\"Lỗi chung: \" + e.getClass().getSimpleName());\n            System.out.println(\"Chi tiết: \" + e.getMessage());\n        }\n    }\n}</code></pre><h3>4. Try-With-Resources</h3><h4>Xử lý tài nguyên tự động:</h4><pre><code>import java.io.*;\n\npublic class TryWithResourcesExample {\n    public static void main(String[] args) {\n        // Try-with-resources tự động đóng tài nguyên\n        try (FileReader fileReader = new FileReader(\"input.txt\");\n             BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n            \n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                System.out.println(line);\n            }\n            \n        } catch (FileNotFoundException e) {\n            System.out.println(\"Không tìm thấy file: \" + e.getMessage());\n        } catch (IOException e) {\n            System.out.println(\"Lỗi đọc file: \" + e.getMessage());\n        }\n        // Tài nguyên tự động được đóng ở đây\n    }\n}</code></pre><h3>5. Custom Exception</h3><h4>Tạo exception tùy chỉnh:</h4><pre><code>// Custom Exception class\nclass InvalidAgeException extends Exception {\n    public InvalidAgeException(String message) {\n        super(message);\n    }\n}\n\nclass InsufficientBalanceException extends RuntimeException {\n    private double balance;\n    private double amount;\n    \n    public InsufficientBalanceException(double balance, double amount) {\n        super(String.format(\"Số dư không đủ! Số dư: %.2f, Số tiền rút: %.2f\", \n                           balance, amount));\n        this.balance = balance;\n        this.amount = amount;\n    }\n    \n    public double getBalance() { return balance; }\n    public double getAmount() { return amount; }\n}\n\n// Sử dụng custom exception\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        // Test InvalidAgeException\n        try {\n            validateAge(15);\n        } catch (InvalidAgeException e) {\n            System.out.println(\"Lỗi tuổi: \" + e.getMessage());\n        }\n        \n        // Test InsufficientBalanceException\n        try {\n            withdrawMoney(1000, 500);\n        } catch (InsufficientBalanceException e) {\n            System.out.println(\"Lỗi rút tiền: \" + e.getMessage());\n        }\n    }\n    \n    public static void validateAge(int age) throws InvalidAgeException {\n        if (age &lt; 18) {\n            throw new InvalidAgeException(\"Tuổi phải từ 18 trở lên!\");\n        }\n        System.out.println(\"Tuổi hợp lệ: \" + age);\n    }\n    \n    public static void withdrawMoney(double balance, double amount) {\n        if (amount &gt; balance) {\n            throw new InsufficientBalanceException(balance, amount);\n        }\n        System.out.println(\"Rút tiền thành công!\");\n    }\n}</code></pre><h3>6. Best Practices</h3><h4>1. Xử lý exception cụ thể:</h4><pre><code>// Tốt: Catch exception cụ thể\ntry {\n    // Code\n} catch (FileNotFoundException e) {\n    // Xử lý file không tồn tại\n} catch (IOException e) {\n    // Xử lý lỗi I/O chung\n}\n\n// Không tốt: Catch quá chung\ntry {\n    // Code\n} catch (Exception e) {\n    // Xử lý tất cả exception\n}</code></pre><h4>2. Sử dụng try-with-resources:</h4><pre><code>// Tốt: Tự động đóng tài nguyên\ntry (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Sử dụng fis\n} catch (IOException e) {\n    // Xử lý lỗi\n}\n\n// Không tốt: Đóng thủ công\nFileInputStream fis = null;\ntry {\n    fis = new FileInputStream(\"file.txt\");\n    // Sử dụng fis\n} catch (IOException e) {\n    // Xử lý lỗi\n} finally {\n    if (fis != null) {\n        try {\n            fis.close();\n        } catch (IOException e) {\n            // Xử lý lỗi đóng file\n        }\n    }\n}</code></pre><h4>3. Logging exception:</h4><pre><code>import java.util.logging.Logger;\n\npublic class LoggingExample {\n    private static final Logger logger = Logger.getLogger(LoggingExample.class.getName());\n    \n    public static void main(String[] args) {\n        try {\n            // Code có thể gây exception\n            int result = 10 / 0;\n        } catch (ArithmeticException e) {\n            // Log exception với stack trace\n            logger.severe(\"Lỗi chia cho 0: \" + e.getMessage());\n            logger.severe(\"Stack trace: \" + java.util.Arrays.toString(e.getStackTrace()));\n            \n            // Hoặc sử dụng log level khác\n            logger.warning(\"Cảnh báo: \" + e.getMessage());\n        }\n    }\n}</code></pre><h3>7. Bài tập thực hành</h3><h4>Bài 1: Máy tính với exception handling</h4><pre><code>import java.util.Scanner;\n\npublic class CalculatorWithException {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            try {\n                System.out.println(\"\\n=== MÁY TÍNH ===\");\n                System.out.print(\"Nhập số thứ nhất: \");\n                double num1 = Double.parseDouble(scanner.nextLine());\n                \n                System.out.print(\"Nhập phép tính (+, -, *, /): \");\n                String operator = scanner.nextLine();\n                \n                System.out.print(\"Nhập số thứ hai: \");\n                double num2 = Double.parseDouble(scanner.nextLine());\n                \n                double result = calculate(num1, operator, num2);\n                System.out.println(\"Kết quả: \" + result);\n                \n            } catch (NumberFormatException e) {\n                System.out.println(\"Lỗi: Vui lòng nhập số hợp lệ!\");\n            } catch (ArithmeticException e) {\n                System.out.println(\"Lỗi: \" + e.getMessage());\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Lỗi: \" + e.getMessage());\n            } catch (Exception e) {\n                System.out.println(\"Lỗi không xác định: \" + e.getMessage());\n            }\n            \n            System.out.print(\"Tiếp tục? (y/n): \");\n            String continueChoice = scanner.nextLine();\n            if (!continueChoice.equalsIgnoreCase(\"y\")) {\n                break;\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    public static double calculate(double num1, String operator, double num2) {\n        switch (operator) {\n            case \"+\":\n                return num1 + num2;\n            case \"-\":\n                return num1 - num2;\n            case \"*\":\n                return num1 * num2;\n            case \"/\":\n                if (num2 == 0) {\n                    throw new ArithmeticException(\"Không thể chia cho 0!\");\n                }\n                return num1 / num2;\n            default:\n                throw new IllegalArgumentException(\"Phép tính không hợp lệ: \" + operator);\n        }\n    }\n}</code></pre><h3>8. Lưu ý quan trọng</h3><ul><li><strong>Specificity:</strong> Catch exception cụ thể trước, chung sau</li><li><strong>Resource Management:</strong> Sử dụng try-with-resources cho tài nguyên</li><li><strong>Logging:</strong> Luôn log exception để debug</li><li><strong>Clean Code:</strong> Không bỏ trống catch block</li><li><strong>Performance:</strong> Exception handling có overhead, chỉ dùng khi cần</li></ul><p>Exception handling là kỹ năng quan trọng giúp tạo ra ứng dụng Java ổn định và dễ bảo trì.</p>",
    "author": "Trần Thiện Nhân",
    "date": "2024-01-23",
    "category": "Java Programming",
    "tags": ["Java", "Exception Handling", "Try-Catch", "Finally", "Custom Exception", "Best Practices"],
    "viewCount": 0,
    "readTime": "22 phút",
    "featured": true,
    "featuredImage": "https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
}