{
  "id": 8,
    "title": "Collections Framework trong Java",
    "excerpt": "Tìm hiểu về Collections Framework trong Java: List, Set, Map và các implementation phổ biến như ArrayList, LinkedList, HashSet, HashMap.",
    "content": "<h2>Collections Framework trong Java</h2><p>Collections Framework là một kiến trúc thống nhất để biểu diễn và thao tác với các tập hợp (collections) trong Java. Nó cung cấp các interface, implementation và thuật toán để làm việc với dữ liệu.</p><h3>1. Tổng quan Collections Framework</h3><h4>Hierarchy chính:</h4><ul><li><strong>Collection Interface:</strong> Gốc của tất cả collections</li><li><strong>List Interface:</strong> Danh sách có thứ tự, cho phép trùng lặp</li><li><strong>Set Interface:</strong> Tập hợp không có thứ tự, không trùng lặp</li><li><strong>Map Interface:</strong> Cặp key-value, không kế thừa từ Collection</li></ul><h3>2. List Interface</h3><h4>ArrayList - Mảng động:</h4><pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        // Tạo ArrayList\n        List&lt;String&gt; fruits = new ArrayList&lt;&gt;();\n        \n        // Thêm phần tử\n        fruits.add(\"Apple\");\n        fruits.add(\"Banana\");\n        fruits.add(\"Orange\");\n        fruits.add(1, \"Grape\"); // Thêm vào vị trí 1\n        \n        // Hiển thị\n        System.out.println(\"Fruits: \" + fruits);\n        System.out.println(\"Size: \" + fruits.size());\n        \n        // Truy cập phần tử\n        System.out.println(\"Phần tử đầu: \" + fruits.get(0));\n        System.out.println(\"Phần tử cuối: \" + fruits.get(fruits.size() - 1));\n        \n        // Tìm kiếm\n        int index = fruits.indexOf(\"Banana\");\n        System.out.println(\"Vị trí Banana: \" + index);\n        \n        // Cập nhật\n        fruits.set(0, \"Mango\");\n        System.out.println(\"Sau cập nhật: \" + fruits);\n        \n        // Xóa\n        fruits.remove(\"Orange\");\n        fruits.remove(0); // Xóa theo index\n        System.out.println(\"Sau xóa: \" + fruits);\n        \n        // Duyệt\n        System.out.println(\"\\nDuyệt bằng for-each:\");\n        for (String fruit : fruits) {\n            System.out.println(\"- \" + fruit);\n        }\n    }\n}</code></pre><h4>LinkedList - Danh sách liên kết:</h4><pre><code>import java.util.LinkedList;\n\npublic class LinkedListExample {\n    public static void main(String[] args) {\n        LinkedList&lt;Integer&gt; numbers = new LinkedList&lt;&gt;();\n        \n        // Thêm vào đầu và cuối\n        numbers.addFirst(1);\n        numbers.addLast(2);\n        numbers.addLast(3);\n        numbers.addFirst(0);\n        \n        System.out.println(\"Numbers: \" + numbers);\n        \n        // Lấy phần tử đầu và cuối\n        System.out.println(\"Đầu: \" + numbers.getFirst());\n        System.out.println(\"Cuối: \" + numbers.getLast());\n        \n        // Xóa đầu và cuối\n        numbers.removeFirst();\n        numbers.removeLast();\n        System.out.println(\"Sau xóa đầu và cuối: \" + numbers);\n    }\n}</code></pre><h3>3. Set Interface</h3><h4>HashSet - Tập hợp không trùng lặp:</h4><pre><code>import java.util.HashSet;\nimport java.util.Set;\n\npublic class HashSetExample {\n    public static void main(String[] args) {\n        Set&lt;String&gt; uniqueNames = new HashSet&lt;&gt;();\n        \n        // Thêm phần tử (tự động loại bỏ trùng lặp)\n        uniqueNames.add(\"Alice\");\n        uniqueNames.add(\"Bob\");\n        uniqueNames.add(\"Alice\"); // Sẽ bị bỏ qua\n        uniqueNames.add(\"Charlie\");\n        uniqueNames.add(\"Bob\"); // Sẽ bị bỏ qua\n        \n        System.out.println(\"Unique names: \" + uniqueNames);\n        System.out.println(\"Size: \" + uniqueNames.size());\n        \n        // Kiểm tra tồn tại\n        System.out.println(\"Có Alice? \" + uniqueNames.contains(\"Alice\"));\n        System.out.println(\"Có David? \" + uniqueNames.contains(\"David\"));\n        \n        // Xóa\n        uniqueNames.remove(\"Bob\");\n        System.out.println(\"Sau xóa Bob: \" + uniqueNames);\n    }\n}</code></pre><h4>TreeSet - Tập hợp có thứ tự:</h4><pre><code>import java.util.TreeSet;\n\npublic class TreeSetExample {\n    public static void main(String[] args) {\n        TreeSet&lt;Integer&gt; sortedNumbers = new TreeSet&lt;&gt;();\n        \n        // Thêm số (tự động sắp xếp)\n        sortedNumbers.add(5);\n        sortedNumbers.add(2);\n        sortedNumbers.add(8);\n        sortedNumbers.add(1);\n        sortedNumbers.add(9);\n        \n        System.out.println(\"Sorted numbers: \" + sortedNumbers);\n        \n        // Lấy phần tử nhỏ nhất và lớn nhất\n        System.out.println(\"Min: \" + sortedNumbers.first());\n        System.out.println(\"Max: \" + sortedNumbers.last());\n        \n        // Lấy các phần tử nhỏ hơn 5\n        System.out.println(\"Numbers &lt; 5: \" + sortedNumbers.headSet(5));\n        \n        // Lấy các phần tử từ 2 đến 8\n        System.out.println(\"Numbers 2-8: \" + sortedNumbers.subSet(2, 9));\n    }\n}</code></pre><h3>4. Map Interface</h3><h4>HashMap - Bảng băm:</h4><pre><code>import java.util.HashMap;\nimport java.util.Map;\n\npublic class HashMapExample {\n    public static void main(String[] args) {\n        Map&lt;String, Integer&gt; studentScores = new HashMap&lt;&gt;();\n        \n        // Thêm cặp key-value\n        studentScores.put(\"Alice\", 95);\n        studentScores.put(\"Bob\", 87);\n        studentScores.put(\"Charlie\", 92);\n        studentScores.put(\"Alice\", 98); // Cập nhật giá trị\n        \n        System.out.println(\"Student scores: \" + studentScores);\n        \n        // Truy cập giá trị\n        System.out.println(\"Alice's score: \" + studentScores.get(\"Alice\"));\n        System.out.println(\"David's score: \" + studentScores.get(\"David\")); // null\n        \n        // Kiểm tra tồn tại key\n        System.out.println(\"Có Alice? \" + studentScores.containsKey(\"Alice\"));\n        System.out.println(\"Có điểm 95? \" + studentScores.containsValue(95));\n        \n        // Duyệt Map\n        System.out.println(\"\\nDuyệt Map:\");\n        for (Map.Entry&lt;String, Integer&gt; entry : studentScores.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n        \n        // Duyệt chỉ keys\n        System.out.println(\"\\nTất cả students:\");\n        for (String student : studentScores.keySet()) {\n            System.out.println(\"- \" + student);\n        }\n        \n        // Duyệt chỉ values\n        System.out.println(\"\\nTất cả scores:\");\n        for (Integer score : studentScores.values()) {\n            System.out.println(\"- \" + score);\n        }\n    }\n}</code></pre><h3>5. Bài tập thực hành</h3><h4>Bài 1: Quản lý danh sách sinh viên</h4><pre><code>import java.util.*;\n\npublic class StudentManager {\n    public static void main(String[] args) {\n        List&lt;Student&gt; students = new ArrayList&lt;&gt;();\n        \n        // Thêm sinh viên\n        students.add(new Student(\"S001\", \"Nguyễn Văn A\", 3.5));\n        students.add(new Student(\"S002\", \"Trần Thị B\", 3.8));\n        students.add(new Student(\"S003\", \"Lê Văn C\", 3.2));\n        students.add(new Student(\"S004\", \"Phạm Thị D\", 3.9));\n        \n        // Hiển thị danh sách\n        System.out.println(\"Danh sách sinh viên:\");\n        for (Student student : students) {\n            System.out.println(student);\n        }\n        \n        // Sắp xếp theo điểm TB\n        students.sort((s1, s2) -&gt; Double.compare(s2.getGpa(), s1.getGpa()));\n        \n        System.out.println(\"\\nSắp xếp theo điểm TB (cao xuống thấp):\");\n        for (Student student : students) {\n            System.out.println(student);\n        }\n        \n        // Tìm sinh viên có điểm cao nhất\n        Student topStudent = Collections.max(students, \n            Comparator.comparing(Student::getGpa));\n        System.out.println(\"\\nSinh viên có điểm cao nhất: \" + topStudent);\n        \n        // Tính điểm TB của lớp\n        double classAverage = students.stream()\n            .mapToDouble(Student::getGpa)\n            .average()\n            .orElse(0.0);\n        System.out.println(\"Điểm TB của lớp: \" + classAverage);\n    }\n}\n\nclass Student {\n    private String id;\n    private String name;\n    private double gpa;\n    \n    public Student(String id, String name, double gpa) {\n        this.id = id;\n        this.name = name;\n        this.gpa = gpa;\n    }\n    \n    public String getId() { return id; }\n    public String getName() { return name; }\n    public double getGpa() { return gpa; }\n    \n    @Override\n    public String toString() {\n        return String.format(\"ID: %s, Tên: %s, Điểm TB: %.2f\", id, name, gpa);\n    }\n}</code></pre><h4>Bài 2: Thống kê từ trong văn bản</h4><pre><code>import java.util.*;\n\npublic class WordStatistics {\n    public static void main(String[] args) {\n        String text = \"Java is a programming language. Java is object-oriented. \" +\n                     \"Java is platform-independent. Programming with Java is fun.\";\n        \n        // Chuyển thành chữ thường và tách từ\n        String[] words = text.toLowerCase().replaceAll(\"[^a-zA-Z\\\\s]\", \"\").split(\"\\\\s+\");\n        \n        // Đếm tần suất từ\n        Map&lt;String, Integer&gt; wordCount = new HashMap&lt;&gt;();\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n            }\n        }\n        \n        // Hiển thị kết quả\n        System.out.println(\"Thống kê từ trong văn bản:\");\n        for (Map.Entry&lt;String, Integer&gt; entry : wordCount.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n        \n        // Tìm từ xuất hiện nhiều nhất\n        String mostFrequent = Collections.max(wordCount.entrySet(), \n            Map.Entry.comparingByValue()).getKey();\n        System.out.println(\"\\nTừ xuất hiện nhiều nhất: \" + mostFrequent + \n                          \" (\" + wordCount.get(mostFrequent) + \" lần)\");\n        \n        // Sắp xếp theo tần suất\n        List&lt;Map.Entry&lt;String, Integer&gt;&gt; sortedWords = new ArrayList&lt;&gt;(wordCount.entrySet());\n        sortedWords.sort(Map.Entry.&lt;String, Integer&gt;comparingByValue().reversed());\n        \n        System.out.println(\"\\nSắp xếp theo tần suất:\");\n        for (Map.Entry&lt;String, Integer&gt; entry : sortedWords) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}</code></pre><h3>6. Lưu ý quan trọng</h3><ul><li><strong>ArrayList:</strong> Truy cập nhanh, chèn/xóa chậm ở giữa</li><li><strong>LinkedList:</strong> Chèn/xóa nhanh, truy cập chậm</li><li><strong>HashSet:</strong> Không trùng lặp, không có thứ tự</li><li><strong>TreeSet:</strong> Không trùng lặp, có thứ tự</li><li><strong>HashMap:</strong> Truy cập nhanh, không có thứ tự</li><li><strong>TreeMap:</strong> Truy cập chậm hơn, có thứ tự</li></ul><p>Collections Framework cung cấp các công cụ mạnh mẽ để làm việc với dữ liệu trong Java một cách hiệu quả.</p>",
    "author": "Trần Thiện Nhân",
    "date": "2024-01-22",
    "category": "Java Programming",
    "tags": ["Java", "Collections", "ArrayList", "LinkedList", "HashSet", "HashMap", "TreeSet", "TreeMap"],
    "viewCount": 0,
    "readTime": "20 phút",
    "featured": true,
    "featuredImage": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
}