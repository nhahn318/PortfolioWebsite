{
  "id": 7,
  "title": "Java Web Development với Spring Boot: RESTful API",
  "content": "# Java Web Development với Spring Boot: RESTful API\n\n## Giới thiệu về Spring Boot Web\n\nSpring Boot Web là module mạnh mẽ để xây dựng ứng dụng web và RESTful API. Với auto-configuration và embedded server, Spring Boot giúp phát triển web application nhanh chóng và hiệu quả.\n\n### Tại sao sử dụng Spring Boot cho Web Development?\n\n1. **Auto-configuration**: Tự động cấu hình Spring MVC\n2. **Embedded Server**: Tomcat, Jetty, Undertow tích hợp sẵn\n3. **RESTful Support**: Dễ dàng tạo REST API\n4. **JSON Processing**: Jackson tự động serialize/deserialize\n5. **Validation**: Bean Validation tích hợp\n6. **Security**: Spring Security integration\n7. **Testing**: Web testing support\n\n## Tạo Spring Boot Web Project\n\n### Maven Dependencies\n\n```xml\n<!-- pom.xml -->\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    \n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-validation</artifactId>\n    </dependency>\n    \n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n    \n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n\n### Application Properties\n\n```properties\n# application.properties\n# Server Configuration\nserver.port=8080\nserver.servlet.context-path=/api\n\n# Database Configuration\nspring.datasource.url=jdbc:mysql://localhost:3306/userdb\nspring.datasource.username=root\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\n# JPA Configuration\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\n\n# Logging\nlogging.level.com.example=DEBUG\nlogging.level.org.springframework.web=DEBUG\n```\n\n## Entity và Repository\n\n### User Entity\n\n```java\nimport javax.persistence.*;\nimport javax.validation.constraints.*;\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"users\")\npublic class User {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @NotBlank(message = \"Tên không được để trống\")\n    @Size(min = 2, max = 50, message = \"Tên phải từ 2-50 ký tự\")\n    @Column(nullable = false)\n    private String name;\n    \n    @NotBlank(message = \"Email không được để trống\")\n    @Email(message = \"Email không hợp lệ\")\n    @Column(unique = true, nullable = false)\n    private String email;\n    \n    @Min(value = 18, message = \"Tuổi phải từ 18 trở lên\")\n    @Max(value = 100, message = \"Tuổi không được vượt quá 100\")\n    private Integer age;\n    \n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n    \n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n    \n    // Constructors\n    public User() {}\n    \n    public User(String name, String email, Integer age) {\n        this.name = name;\n        this.email = email;\n        this.age = age;\n    }\n    \n    // JPA Callbacks\n    @PrePersist\n    protected void onCreate() {\n        createdAt = LocalDateTime.now();\n        updatedAt = LocalDateTime.now();\n    }\n    \n    @PreUpdate\n    protected void onUpdate() {\n        updatedAt = LocalDateTime.now();\n    }\n    \n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    \n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    \n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    \n    public Integer getAge() { return age; }\n    public void setAge(Integer age) { this.age = age; }\n    \n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n    \n    public LocalDateTime getUpdatedAt() { return updatedAt; }\n    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }\n}\n```\n\n### User Repository\n\n```java\nimport org.springframework.data.jpa.repository.*;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    \n    // Custom query methods\n    List<User> findByNameContainingIgnoreCase(String name);\n    \n    List<User> findByAgeGreaterThan(Integer age);\n    \n    Optional<User> findByEmail(String email);\n    \n    boolean existsByEmail(String email);\n    \n    // Custom JPQL query\n    @Query(\"SELECT u FROM User u WHERE u.age BETWEEN :minAge AND :maxAge\")\n    List<User> findUsersByAgeRange(@Param(\"minAge\") Integer minAge, @Param(\"maxAge\") Integer maxAge);\n    \n    // Native query\n    @Query(value = \"SELECT * FROM users WHERE name LIKE %:name%\", nativeQuery = true)\n    List<User> findUsersByNameNative(@Param(\"name\") String name);\n    \n    // Count query\n    @Query(\"SELECT COUNT(u) FROM User u WHERE u.age > :age\")\n    long countUsersOlderThan(@Param(\"age\") Integer age);\n}\n```\n\n## Service Layer\n\n### User Service\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Transactional\npublic class UserService {\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    public List<User> getAllUsers() {\n        return userRepository.findAll();\n    }\n    \n    public Optional<User> getUserById(Long id) {\n        return userRepository.findById(id);\n    }\n    \n    public User createUser(User user) {\n        // Kiểm tra email đã tồn tại\n        if (userRepository.existsByEmail(user.getEmail())) {\n            throw new RuntimeException(\"Email đã tồn tại: \" + user.getEmail());\n        }\n        return userRepository.save(user);\n    }\n    \n    public User updateUser(Long id, User userDetails) {\n        User user = userRepository.findById(id)\n            .orElseThrow(() -> new RuntimeException(\"User không tồn tại với id: \" + id));\n        \n        // Kiểm tra email trùng lặp (trừ user hiện tại)\n        if (!user.getEmail().equals(userDetails.getEmail()) && \n            userRepository.existsByEmail(userDetails.getEmail())) {\n            throw new RuntimeException(\"Email đã tồn tại: \" + userDetails.getEmail());\n        }\n        \n        user.setName(userDetails.getName());\n        user.setEmail(userDetails.getEmail());\n        user.setAge(userDetails.getAge());\n        \n        return userRepository.save(user);\n    }\n    \n    public void deleteUser(Long id) {\n        User user = userRepository.findById(id)\n            .orElseThrow(() -> new RuntimeException(\"User không tồn tại với id: \" + id));\n        userRepository.delete(user);\n    }\n    \n    public List<User> searchUsersByName(String name) {\n        return userRepository.findByNameContainingIgnoreCase(name);\n    }\n    \n    public List<User> getUsersByAgeRange(Integer minAge, Integer maxAge) {\n        return userRepository.findUsersByAgeRange(minAge, maxAge);\n    }\n    \n    public long countUsersOlderThan(Integer age) {\n        return userRepository.countUsersOlderThan(age);\n    }\n}\n```\n\n## REST Controller\n\n### User Controller\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.*;\nimport org.springframework.web.bind.annotation.*;\nimport javax.validation.Valid;\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/users\")\n@CrossOrigin(origins = \"*\")\npublic class UserController {\n    \n    @Autowired\n    private UserService userService;\n    \n    // GET /api/users - Lấy tất cả users\n    @GetMapping\n    public ResponseEntity<List<User>> getAllUsers() {\n        List<User> users = userService.getAllUsers();\n        return ResponseEntity.ok(users);\n    }\n    \n    // GET /api/users/{id} - Lấy user theo ID\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<User> getUserById(@PathVariable Long id) {\n        Optional<User> user = userService.getUserById(id);\n        if (user.isPresent()) {\n            return ResponseEntity.ok(user.get());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n    \n    // POST /api/users - Tạo user mới\n    @PostMapping\n    public ResponseEntity<User> createUser(@Valid @RequestBody User user) {\n        try {\n            User createdUser = userService.createUser(user);\n            return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);\n        } catch (RuntimeException e) {\n            return ResponseEntity.badRequest().build();\n        }\n    }\n    \n    // PUT /api/users/{id} - Cập nhật user\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<User> updateUser(@PathVariable Long id, @Valid @RequestBody User userDetails) {\n        try {\n            User updatedUser = userService.updateUser(id, userDetails);\n            return ResponseEntity.ok(updatedUser);\n        } catch (RuntimeException e) {\n            return ResponseEntity.notFound().build();\n        }\n    }\n    \n    // DELETE /api/users/{id} - Xóa user\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {\n        try {\n            userService.deleteUser(id);\n            return ResponseEntity.noContent().build();\n        } catch (RuntimeException e) {\n            return ResponseEntity.notFound().build();\n        }\n    }\n    \n    // GET /api/users/search?name=... - Tìm kiếm user theo tên\n    @GetMapping(\"/search\")\n    public ResponseEntity<List<User>> searchUsers(@RequestParam String name) {\n        List<User> users = userService.searchUsersByName(name);\n        return ResponseEntity.ok(users);\n    }\n    \n    // GET /api/users/age-range?minAge=...&maxAge=... - Lấy users theo độ tuổi\n    @GetMapping(\"/age-range\")\n    public ResponseEntity<List<User>> getUsersByAgeRange(\n            @RequestParam Integer minAge, \n            @RequestParam Integer maxAge) {\n        List<User> users = userService.getUsersByAgeRange(minAge, maxAge);\n        return ResponseEntity.ok(users);\n    }\n    \n    // GET /api/users/count?age=... - Đếm users lớn hơn tuổi\n    @GetMapping(\"/count\")\n    public ResponseEntity<Long> countUsersOlderThan(@RequestParam Integer age) {\n        long count = userService.countUsersOlderThan(age);\n        return ResponseEntity.ok(count);\n    }\n}\n```\n\n## Exception Handling\n\n### Global Exception Handler\n\n```java\nimport org.springframework.http.*;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.validation.FieldError;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    // Xử lý validation errors\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<Map<String, String>> handleValidationExceptions(\n            MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getAllErrors().forEach((error) -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            errors.put(fieldName, errorMessage);\n        });\n        return ResponseEntity.badRequest().body(errors);\n    }\n    \n    // Xử lý runtime exceptions\n    @ExceptionHandler(RuntimeException.class)\n    public ResponseEntity<Map<String, String>> handleRuntimeException(RuntimeException ex) {\n        Map<String, String> error = new HashMap<>();\n        error.put(\"error\", ex.getMessage());\n        return ResponseEntity.badRequest().body(error);\n    }\n    \n    // Xử lý generic exceptions\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity<Map<String, String>> handleGenericException(Exception ex) {\n        Map<String, String> error = new HashMap<>();\n        error.put(\"error\", \"Đã xảy ra lỗi không mong muốn\");\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);\n    }\n}\n```\n\n## DTO (Data Transfer Object)\n\n### User DTO\n\n```java\nimport javax.validation.constraints.*;\n\npublic class UserDTO {\n    \n    @NotBlank(message = \"Tên không được để trống\")\n    @Size(min = 2, max = 50, message = \"Tên phải từ 2-50 ký tự\")\n    private String name;\n    \n    @NotBlank(message = \"Email không được để trống\")\n    @Email(message = \"Email không hợp lệ\")\n    private String email;\n    \n    @Min(value = 18, message = \"Tuổi phải từ 18 trở lên\")\n    @Max(value = 100, message = \"Tuổi không được vượt quá 100\")\n    private Integer age;\n    \n    // Constructors\n    public UserDTO() {}\n    \n    public UserDTO(String name, String email, Integer age) {\n        this.name = name;\n        this.email = email;\n        this.age = age;\n    }\n    \n    // Getters and Setters\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    \n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    \n    public Integer getAge() { return age; }\n    public void setAge(Integer age) { this.age = age; }\n}\n```\n\n### User Response DTO\n\n```java\nimport java.time.LocalDateTime;\n\npublic class UserResponseDTO {\n    private Long id;\n    private String name;\n    private String email;\n    private Integer age;\n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n    \n    // Constructors\n    public UserResponseDTO() {}\n    \n    public UserResponseDTO(User user) {\n        this.id = user.getId();\n        this.name = user.getName();\n        this.email = user.getEmail();\n        this.age = user.getAge();\n        this.createdAt = user.getCreatedAt();\n        this.updatedAt = user.getUpdatedAt();\n    }\n    \n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    \n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    \n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    \n    public Integer getAge() { return age; }\n    public void setAge(Integer age) { this.age = age; }\n    \n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n    \n    public LocalDateTime getUpdatedAt() { return updatedAt; }\n    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }\n}\n```\n\n## Pagination và Sorting\n\n### Paginated User Controller\n\n```java\nimport org.springframework.data.domain.*;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class PaginatedUserController {\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    // GET /api/users/paginated?page=0&size=10&sort=name,asc\n    @GetMapping(\"/paginated\")\n    public ResponseEntity<Page<User>> getUsersPaginated(\n            @RequestParam(defaultValue = \"0\") int page,\n            @RequestParam(defaultValue = \"10\") int size,\n            @RequestParam(defaultValue = \"id\") String sortBy,\n            @RequestParam(defaultValue = \"asc\") String sortDir) {\n        \n        Sort sort = sortDir.equalsIgnoreCase(\"desc\") ? \n            Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\n        \n        Pageable pageable = PageRequest.of(page, size, sort);\n        Page<User> users = userRepository.findAll(pageable);\n        \n        return ResponseEntity.ok(users);\n    }\n}\n```\n\n## Testing\n\n### Unit Test\n\n```java\nimport org.junit.jupiter.api.*;\nimport org.mockito.*;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(MockitoExtension.class)\nclass UserControllerTest {\n    \n    @Mock\n    private UserService userService;\n    \n    @InjectMocks\n    private UserController userController;\n    \n    @Test\n    void testGetAllUsers() {\n        // Given\n        List<User> users = Arrays.asList(\n            new User(\"John\", \"john@example.com\", 25),\n            new User(\"Jane\", \"jane@example.com\", 30)\n        );\n        when(userService.getAllUsers()).thenReturn(users);\n        \n        // When\n        ResponseEntity<List<User>> response = userController.getAllUsers();\n        \n        // Then\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(2, response.getBody().size());\n        verify(userService).getAllUsers();\n    }\n    \n    @Test\n    void testCreateUser() {\n        // Given\n        User user = new User(\"John\", \"john@example.com\", 25);\n        User createdUser = new User(\"John\", \"john@example.com\", 25);\n        createdUser.setId(1L);\n        \n        when(userService.createUser(user)).thenReturn(createdUser);\n        \n        // When\n        ResponseEntity<User> response = userController.createUser(user);\n        \n        // Then\n        assertEquals(HttpStatus.CREATED, response.getStatusCode());\n        assertEquals(1L, response.getBody().getId());\n        verify(userService).createUser(user);\n    }\n}\n```\n\n### Integration Test\n\n```java\nimport org.junit.jupiter.api.*;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.boot.web.server.LocalServerPort;\nimport org.springframework.http.*;\nimport org.springframework.test.context.ActiveProfiles;\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@ActiveProfiles(\"test\")\nclass UserControllerIntegrationTest {\n    \n    @LocalServerPort\n    private int port;\n    \n    @Autowired\n    private TestRestTemplate restTemplate;\n    \n    private String getBaseUrl() {\n        return \"http://localhost:\" + port + \"/api/users\";\n    }\n    \n    @Test\n    void testCreateAndGetUser() {\n        // Given\n        User user = new User(\"John\", \"john@example.com\", 25);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        HttpEntity<User> request = new HttpEntity<>(user, headers);\n        \n        // When - Create user\n        ResponseEntity<User> createResponse = restTemplate.postForEntity(\n            getBaseUrl(), request, User.class);\n        \n        // Then\n        assertEquals(HttpStatus.CREATED, createResponse.getStatusCode());\n        assertNotNull(createResponse.getBody().getId());\n        \n        // When - Get user\n        Long userId = createResponse.getBody().getId();\n        ResponseEntity<User> getResponse = restTemplate.getForEntity(\n            getBaseUrl() + \"/\" + userId, User.class);\n        \n        // Then\n        assertEquals(HttpStatus.OK, getResponse.getStatusCode());\n        assertEquals(\"John\", getResponse.getBody().getName());\n    }\n}\n```\n\n## CORS Configuration\n\n### CORS Config\n\n```java\nimport org.springframework.context.annotation.*;\nimport org.springframework.web.servlet.config.annotation.*;\n\n@Configuration\n@EnableWebMvc\npublic class WebConfig implements WebMvcConfigurer {\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/api/**\")\n            .allowedOrigins(\"http://localhost:3000\", \"http://localhost:8080\")\n            .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n            .allowedHeaders(\"*\")\n            .allowCredentials(true);\n    }\n}\n```\n\n## Best Practices\n\n### 1. Proper HTTP Status Codes\n\n```java\n// Tốt - sử dụng đúng HTTP status codes\n@PostMapping\npublic ResponseEntity<User> createUser(@Valid @RequestBody User user) {\n    User createdUser = userService.createUser(user);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);\n}\n\n@DeleteMapping(\"/{id}\")\npublic ResponseEntity<Void> deleteUser(@PathVariable Long id) {\n    userService.deleteUser(id);\n    return ResponseEntity.noContent().build();\n}\n```\n\n### 2. Validation\n\n```java\n// Tốt - sử dụng validation annotations\n@PostMapping\npublic ResponseEntity<User> createUser(@Valid @RequestBody User user) {\n    // Validation tự động được thực hiện\n    return ResponseEntity.ok(userService.createUser(user));\n}\n```\n\n### 3. Exception Handling\n\n```java\n// Tốt - xử lý exception tập trung\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(RuntimeException.class)\n    public ResponseEntity<Map<String, String>> handleRuntimeException(RuntimeException ex) {\n        // Xử lý exception\n    }\n}\n```\n\n## Kết luận\n\nSpring Boot Web Development cung cấp:\n\n1. **RESTful API**: Dễ dàng tạo REST endpoints\n2. **Data Validation**: Bean Validation tích hợp\n3. **Exception Handling**: Global exception handling\n4. **Pagination**: Hỗ trợ phân trang và sắp xếp\n5. **Testing**: Unit và Integration testing\n6. **CORS**: Cross-origin resource sharing\n\n### Lợi ích chính:\n\n- **Rapid Development**: Phát triển nhanh với auto-configuration\n- **Production Ready**: Sẵn sàng cho production\n- **Scalable**: Dễ dàng mở rộng\n- **Maintainable**: Code dễ bảo trì\n- **Testable**: Dễ dàng test\n\n### Best Practices:\n\n- Sử dụng **DTO** cho data transfer\n- **Proper HTTP status codes**\n- **Global exception handling**\n- **Validation** cho input data\n- **Pagination** cho large datasets\n- **CORS configuration** cho web apps\n- **Comprehensive testing**\n\nHãy thực hành các ví dụ trên để nắm vững Spring Boot Web Development!",
  "excerpt": "Tìm hiểu Java Web Development với Spring Boot - từ RESTful API, Entity, Repository đến Controller và best practices.",
  "author": "TRAN NHAN",
  "category": "Spring Boot Web",
  "tags": ["Spring Boot", "REST API", "Web Development", "Java"],
  "featuredImageUrl": "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=400&h=250&fit=crop&crop=center",
  "isPublished": true,
  "createdDate": "2024-01-30T14:20:00Z",
  "updatedDate": "2024-01-30T14:20:00Z",
  "viewCount": 580
}