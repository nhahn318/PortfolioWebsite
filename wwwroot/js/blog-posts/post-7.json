{
  "id": 7,
    "title": "Hướng đối tượng trong Java: Class và Object",
    "excerpt": "Tìm hiểu về lập trình hướng đối tượng trong Java: khái niệm class, object, constructor, method và các tính chất cơ bản của OOP.",
    "content": "<h2>Hướng đối tượng trong Java</h2><p>Java là ngôn ngữ lập trình hướng đối tượng (OOP) hoàn toàn. Mọi thứ trong Java đều là object, trừ các kiểu dữ liệu nguyên thủy.</p><h3>1. Class và Object</h3><h4>Class - Khuôn mẫu:</h4><pre><code>public class Student {\n    // Thuộc tính (Attributes/Fields)\n    private String name;\n    private int age;\n    private double gpa;\n    \n    // Constructor - Hàm khởi tạo\n    public Student(String name, int age, double gpa) {\n        this.name = name;\n        this.age = age;\n        this.gpa = gpa;\n    }\n    \n    // Phương thức (Methods)\n    public void study() {\n        System.out.println(name + \" đang học bài\");\n    }\n    \n    public void displayInfo() {\n        System.out.println(\"Tên: \" + name);\n        System.out.println(\"Tuổi: \" + age);\n        System.out.println(\"Điểm TB: \" + gpa);\n    }\n    \n    // Getter và Setter\n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public void setAge(int age) {\n        if (age > 0) {\n            this.age = age;\n        }\n    }\n    \n    public double getGpa() {\n        return gpa;\n    }\n    \n    public void setGpa(double gpa) {\n        if (gpa >= 0.0 && gpa <= 4.0) {\n            this.gpa = gpa;\n        }\n    }\n}</code></pre><h4>Object - Thể hiện cụ thể:</h4><pre><code>public class StudentTest {\n    public static void main(String[] args) {\n        // Tạo object từ class\n        Student student1 = new Student(\"Nguyễn Văn A\", 20, 3.5);\n        Student student2 = new Student(\"Trần Thị B\", 19, 3.8);\n        \n        // Sử dụng object\n        student1.displayInfo();\n        student1.study();\n        \n        student2.displayInfo();\n        student2.study();\n        \n        // Thay đổi thông tin\n        student1.setGpa(3.7);\n        System.out.println(\"Điểm TB mới: \" + student1.getGpa());\n    }\n}</code></pre><h3>2. Constructor</h3><h4>Constructor mặc định và có tham số:</h4><pre><code>public class BankAccount {\n    private String accountNumber;\n    private String ownerName;\n    private double balance;\n    \n    // Constructor mặc định\n    public BankAccount() {\n        this.accountNumber = \"\";\n        this.ownerName = \"\";\n        this.balance = 0.0;\n    }\n    \n    // Constructor có tham số\n    public BankAccount(String accountNumber, String ownerName, double balance) {\n        this.accountNumber = accountNumber;\n        this.ownerName = ownerName;\n        this.balance = balance;\n    }\n    \n    // Constructor sao chép\n    public BankAccount(BankAccount other) {\n        this.accountNumber = other.accountNumber;\n        this.ownerName = other.ownerName;\n        this.balance = other.balance;\n    }\n    \n    // Phương thức\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Gửi tiền thành công. Số dư: \" + balance);\n        }\n    }\n    \n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println(\"Rút tiền thành công. Số dư: \" + balance);\n        } else {\n            System.out.println(\"Không thể rút tiền!\");\n        }\n    }\n    \n    public void displayBalance() {\n        System.out.println(\"Số dư tài khoản \" + accountNumber + \": \" + balance);\n    }\n}</code></pre><h3>3. Tính chất của OOP</h3><h4>Encapsulation (Đóng gói):</h4><pre><code>public class Car {\n    // Thuộc tính private - chỉ truy cập trong class\n    private String brand;\n    private String model;\n    private int year;\n    private double price;\n    \n    // Constructor\n    public Car(String brand, String model, int year, double price) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n        this.price = price;\n    }\n    \n    // Getter methods\n    public String getBrand() { return brand; }\n    public String getModel() { return model; }\n    public int getYear() { return year; }\n    public double getPrice() { return price; }\n    \n    // Setter methods với validation\n    public void setYear(int year) {\n        if (year >= 1900 && year <= 2024) {\n            this.year = year;\n        }\n    }\n    \n    public void setPrice(double price) {\n        if (price > 0) {\n            this.price = price;\n        }\n    }\n    \n    // Phương thức công khai\n    public void start() {\n        System.out.println(brand + \" \" + model + \" đã khởi động\");\n    }\n    \n    public void stop() {\n        System.out.println(brand + \" \" + model + \" đã dừng\");\n    }\n}</code></pre><h4>Inheritance (Kế thừa):</h4><pre><code>// Class cha\npublic class Animal {\n    protected String name;\n    protected int age;\n    \n    public Animal(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public void eat() {\n        System.out.println(name + \" đang ăn\");\n    }\n    \n    public void sleep() {\n        System.out.println(name + \" đang ngủ\");\n    }\n    \n    public void makeSound() {\n        System.out.println(name + \" phát ra âm thanh\");\n    }\n}\n\n// Class con\npublic class Dog extends Animal {\n    private String breed;\n    \n    public Dog(String name, int age, String breed) {\n        super(name, age); // Gọi constructor của class cha\n        this.breed = breed;\n    }\n    \n    // Override phương thức của class cha\n    @Override\n    public void makeSound() {\n        System.out.println(name + \" sủa: Gâu gâu!\");\n    }\n    \n    // Phương thức riêng của Dog\n    public void wagTail() {\n        System.out.println(name + \" vẫy đuôi\");\n    }\n    \n    public String getBreed() {\n        return breed;\n    }\n}</code></pre><h3>4. Polymorphism (Đa hình)</h3><pre><code>public class PolymorphismExample {\n    public static void main(String[] args) {\n        // Đa hình thời gian biên dịch (Method Overloading)\n        Calculator calc = new Calculator();\n        System.out.println(calc.add(5, 3));        // 8\n        System.out.println(calc.add(5.5, 3.2));   // 8.7\n        System.out.println(calc.add(5, 3, 2));     // 10\n        \n        // Đa hình thời gian chạy (Method Overriding)\n        Animal[] animals = {\n            new Dog(\"Buddy\", 3, \"Golden Retriever\"),\n            new Cat(\"Whiskers\", 2, \"Persian\")\n        };\n        \n        for (Animal animal : animals) {\n            animal.makeSound(); // Gọi phương thức tương ứng của từng loại\n        }\n    }\n}\n\nclass Calculator {\n    // Method overloading\n    public int add(int a, int b) {\n        return a + b;\n    }\n    \n    public double add(double a, double b) {\n        return a + b;\n    }\n    \n    public int add(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n\nclass Cat extends Animal {\n    private String breed;\n    \n    public Cat(String name, int age, String breed) {\n        super(name, age);\n        this.breed = breed;\n    }\n    \n    @Override\n    public void makeSound() {\n        System.out.println(name + \" kêu: Meo meo!\");\n    }\n    \n    public String getBreed() {\n        return breed;\n    }\n}</code></pre><h3>5. Bài tập thực hành</h3><h4>Bài 1: Quản lý thư viện</h4><pre><code>public class Library {\n    public static void main(String[] args) {\n        Book book1 = new Book(\"Java Programming\", \"John Doe\", \"123456789\", 2023);\n        Book book2 = new Book(\"Data Structures\", \"Jane Smith\", \"987654321\", 2022);\n        \n        Member member1 = new Member(\"M001\", \"Nguyễn Văn A\", \"nguyenvana@email.com\");\n        \n        // Mượn sách\n        member1.borrowBook(book1);\n        member1.borrowBook(book2);\n        \n        // Hiển thị thông tin\n        member1.displayBorrowedBooks();\n        \n        // Trả sách\n        member1.returnBook(book1);\n        member1.displayBorrowedBooks();\n    }\n}\n\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n    private int year;\n    private boolean isAvailable;\n    \n    public Book(String title, String author, String isbn, int year) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n        this.year = year;\n        this.isAvailable = true;\n    }\n    \n    // Getters và Setters\n    public String getTitle() { return title; }\n    public String getAuthor() { return author; }\n    public String getIsbn() { return isbn; }\n    public int getYear() { return year; }\n    public boolean isAvailable() { return isAvailable; }\n    \n    public void setAvailable(boolean available) {\n        this.isAvailable = available;\n    }\n    \n    public void displayInfo() {\n        System.out.println(\"Tiêu đề: \" + title);\n        System.out.println(\"Tác giả: \" + author);\n        System.out.println(\"ISBN: \" + isbn);\n        System.out.println(\"Năm: \" + year);\n        System.out.println(\"Trạng thái: \" + (isAvailable ? \"Có sẵn\" : \"Đã mượn\"));\n    }\n}\n\nclass Member {\n    private String memberId;\n    private String name;\n    private String email;\n    private java.util.List&lt;Book&gt; borrowedBooks;\n    \n    public Member(String memberId, String name, String email) {\n        this.memberId = memberId;\n        this.name = name;\n        this.email = email;\n        this.borrowedBooks = new java.util.ArrayList&lt;&gt;();\n    }\n    \n    public void borrowBook(Book book) {\n        if (book.isAvailable()) {\n            book.setAvailable(false);\n            borrowedBooks.add(book);\n            System.out.println(name + \" đã mượn sách: \" + book.getTitle());\n        } else {\n            System.out.println(\"Sách \" + book.getTitle() + \" không có sẵn!\");\n        }\n    }\n    \n    public void returnBook(Book book) {\n        if (borrowedBooks.contains(book)) {\n            book.setAvailable(true);\n            borrowedBooks.remove(book);\n            System.out.println(name + \" đã trả sách: \" + book.getTitle());\n        } else {\n            System.out.println(\"Bạn chưa mượn sách này!\");\n        }\n    }\n    \n    public void displayBorrowedBooks() {\n        System.out.println(\"\\nSách đã mượn của \" + name + \":\");\n        if (borrowedBooks.isEmpty()) {\n            System.out.println(\"Không có sách nào được mượn.\");\n        } else {\n            for (Book book : borrowedBooks) {\n                book.displayInfo();\n                System.out.println();\n            }\n        }\n    }\n}</code></pre><h3>6. Lưu ý quan trọng</h3><ul><li><strong>Encapsulation:</strong> Sử dụng private cho thuộc tính, public cho phương thức cần thiết</li><li><strong>Inheritance:</strong> Sử dụng extends để kế thừa, super() để gọi constructor cha</li><li><strong>Polymorphism:</strong> Overloading (cùng tên, khác tham số), Overriding (ghi đè phương thức cha)</li><li><strong>this:</strong> Tham chiếu đến object hiện tại</li><li><strong>static:</strong> Thuộc về class, không thuộc về object</li></ul><p>Lập trình hướng đối tượng giúp code Java dễ bảo trì, mở rộng và tái sử dụng hơn.</p>",
    "author": "Trần Thiện Nhân",
    "date": "2024-01-21",
    "category": "Java Programming",
    "tags": ["Java", "OOP", "Class", "Object", "Constructor", "Encapsulation", "Inheritance", "Polymorphism"],
    "viewCount": 1680,
    "readTime": "18 phút",
    "featured": true
}