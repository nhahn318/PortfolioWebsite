{
  "id": 2,
  "title": "Object-Oriented Programming trong Java: 4 Nguyên Lý Cơ Bản",
  "content": "# Object-Oriented Programming trong Java: 4 Nguyên Lý Cơ Bản\n\n## Giới thiệu về OOP\n\nObject-Oriented Programming (OOP) là một phương pháp lập trình dựa trên khái niệm \"đối tượng\" (objects). Java là một ngôn ngữ hoàn toàn hướng đối tượng, mọi thứ trong Java đều là object (trừ primitive types).\n\n### Tại sao cần OOP?\n\n1. **Tái sử dụng code**: Viết một lần, dùng nhiều lần\n2. **Dễ bảo trì**: Code có cấu trúc rõ ràng\n3. **Mô phỏng thực tế**: Giống với cách suy nghĩ của con người\n4. **Bảo mật**: Encapsulation bảo vệ dữ liệu\n5. **Linh hoạt**: Dễ dàng mở rộng và thay đổi\n\n## 1. Encapsulation (Đóng gói)\n\nEncapsulation là việc ẩn giấu thông tin chi tiết bên trong của một object và chỉ cho phép truy cập thông qua các phương thức công khai.\n\n### Ví dụ về Encapsulation\n\n```java\npublic class BankAccount {\n    // Private fields - không thể truy cập trực tiếp từ bên ngoài\n    private String accountNumber;\n    private double balance;\n    private String accountHolder;\n    \n    // Constructor\n    public BankAccount(String accountNumber, String accountHolder, double initialBalance) {\n        this.accountNumber = accountNumber;\n        this.accountHolder = accountHolder;\n        this.balance = initialBalance;\n    }\n    \n    // Public methods - giao diện công khai\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Đã gửi: \" + amount + \" VND\");\n        } else {\n            System.out.println(\"Số tiền gửi phải lớn hơn 0\");\n        }\n    }\n    \n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println(\"Đã rút: \" + amount + \" VND\");\n        } else {\n            System.out.println(\"Số tiền rút không hợp lệ hoặc không đủ tiền\");\n        }\n    }\n    \n    public double getBalance() {\n        return balance;\n    }\n    \n    public String getAccountNumber() {\n        return accountNumber;\n    }\n    \n    public String getAccountHolder() {\n        return accountHolder;\n    }\n    \n    // Private method - chỉ sử dụng nội bộ\n    private void logTransaction(String type, double amount) {\n        System.out.println(\"Giao dịch: \" + type + \" - \" + amount + \" VND\");\n    }\n}\n```\n\n### Sử dụng BankAccount\n\n```java\npublic class BankAccountDemo {\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(\"123456789\", \"Nguyễn Văn A\", 1000000);\n        \n        // Có thể truy cập thông qua public methods\n        System.out.println(\"Số dư hiện tại: \" + account.getBalance() + \" VND\");\n        \n        account.deposit(500000);\n        account.withdraw(200000);\n        \n        System.out.println(\"Số dư cuối: \" + account.getBalance() + \" VND\");\n        \n        // Không thể truy cập trực tiếp private fields\n        // account.balance = 10000000; // Lỗi compile!\n    }\n}\n```\n\n## 2. Inheritance (Kế thừa)\n\nInheritance cho phép một class kế thừa các thuộc tính và phương thức từ class khác.\n\n### Ví dụ về Inheritance\n\n```java\n// Class cha (Parent/Super class)\npublic class Vehicle {\n    protected String brand;\n    protected String model;\n    protected int year;\n    protected double price;\n    \n    public Vehicle(String brand, String model, int year, double price) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n        this.price = price;\n    }\n    \n    public void start() {\n        System.out.println(\"Phương tiện đang khởi động...\");\n    }\n    \n    public void stop() {\n        System.out.println(\"Phương tiện đã dừng.\");\n    }\n    \n    public void displayInfo() {\n        System.out.println(\"Hãng: \" + brand + \", Model: \" + model + \", Năm: \" + year);\n    }\n    \n    // Getter methods\n    public String getBrand() { return brand; }\n    public String getModel() { return model; }\n    public int getYear() { return year; }\n    public double getPrice() { return price; }\n}\n```\n\n### Class con kế thừa từ Vehicle\n\n```java\n// Class con (Child/Sub class)\npublic class Car extends Vehicle {\n    private int numberOfDoors;\n    private String fuelType;\n    \n    public Car(String brand, String model, int year, double price, \n               int numberOfDoors, String fuelType) {\n        // Gọi constructor của class cha\n        super(brand, model, year, price);\n        this.numberOfDoors = numberOfDoors;\n        this.fuelType = fuelType;\n    }\n    \n    // Override phương thức của class cha\n    @Override\n    public void start() {\n        System.out.println(\"Xe ô tô \" + brand + \" \" + model + \" đang khởi động...\");\n    }\n    \n    // Phương thức riêng của Car\n    public void openTrunk() {\n        System.out.println(\"Mở cốp xe.\");\n    }\n    \n    public void honk() {\n        System.out.println(\"Beep beep!\");\n    }\n    \n    @Override\n    public void displayInfo() {\n        super.displayInfo(); // Gọi phương thức của class cha\n        System.out.println(\"Số cửa: \" + numberOfDoors + \", Loại nhiên liệu: \" + fuelType);\n    }\n    \n    // Getter methods\n    public int getNumberOfDoors() { return numberOfDoors; }\n    public String getFuelType() { return fuelType; }\n}\n```\n\n### Class Motorcycle cũng kế thừa từ Vehicle\n\n```java\npublic class Motorcycle extends Vehicle {\n    private boolean hasSidecar;\n    private int engineSize;\n    \n    public Motorcycle(String brand, String model, int year, double price, \n                     boolean hasSidecar, int engineSize) {\n        super(brand, model, year, price);\n        this.hasSidecar = hasSidecar;\n        this.engineSize = engineSize;\n    }\n    \n    @Override\n    public void start() {\n        System.out.println(\"Xe máy \" + brand + \" \" + model + \" đang khởi động...\");\n    }\n    \n    public void wheelie() {\n        System.out.println(\"Thực hiện wheelie!\");\n    }\n    \n    @Override\n    public void displayInfo() {\n        super.displayInfo();\n        System.out.println(\"Có sidecar: \" + hasSidecar + \", Dung tích: \" + engineSize + \"cc\");\n    }\n    \n    public boolean hasSidecar() { return hasSidecar; }\n    public int getEngineSize() { return engineSize; }\n}\n```\n\n## 3. Polymorphism (Đa hình)\n\nPolymorphism cho phép một object có thể có nhiều hình thái khác nhau.\n\n### Ví dụ về Polymorphism\n\n```java\npublic class PolymorphismDemo {\n    public static void main(String[] args) {\n        // Tạo mảng các Vehicle\n        Vehicle[] vehicles = {\n            new Car(\"Toyota\", \"Camry\", 2023, 800000000, 4, \"Xăng\"),\n            new Motorcycle(\"Honda\", \"CBR600RR\", 2023, 200000000, false, 600),\n            new Car(\"Honda\", \"Civic\", 2022, 700000000, 4, \"Hybrid\")\n        };\n        \n        // Polymorphism - cùng một phương thức nhưng hành vi khác nhau\n        for (Vehicle vehicle : vehicles) {\n            vehicle.start(); // Mỗi loại xe có cách khởi động riêng\n            vehicle.displayInfo();\n            System.out.println(\"---\");\n        }\n        \n        // Casting để truy cập phương thức riêng\n        Car car = (Car) vehicles[0];\n        car.honk();\n        \n        Motorcycle motorcycle = (Motorcycle) vehicles[1];\n        motorcycle.wheelie();\n    }\n}\n```\n\n### Method Overloading (Nạp chồng phương thức)\n\n```java\npublic class Calculator {\n    \n    // Nạp chồng phương thức add\n    public int add(int a, int b) {\n        return a + b;\n    }\n    \n    public double add(double a, double b) {\n        return a + b;\n    }\n    \n    public int add(int a, int b, int c) {\n        return a + b + c;\n    }\n    \n    public String add(String a, String b) {\n        return a + b;\n    }\n    \n    public static void main(String[] args) {\n        Calculator calc = new Calculator();\n        \n        System.out.println(\"Tổng 2 số nguyên: \" + calc.add(5, 3));\n        System.out.println(\"Tổng 2 số thực: \" + calc.add(5.5, 3.2));\n        System.out.println(\"Tổng 3 số: \" + calc.add(1, 2, 3));\n        System.out.println(\"Nối chuỗi: \" + calc.add(\"Hello\", \" World\"));\n    }\n}\n```\n\n## 4. Abstraction (Trừu tượng hóa)\n\nAbstraction ẩn giấu các chi tiết phức tạp và chỉ hiển thị những tính năng cần thiết.\n\n### Abstract Class\n\n```java\n// Abstract class - không thể tạo instance trực tiếp\npublic abstract class Animal {\n    protected String name;\n    protected int age;\n    \n    public Animal(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    // Concrete method - có implementation\n    public void eat() {\n        System.out.println(name + \" đang ăn...\");\n    }\n    \n    public void sleep() {\n        System.out.println(name + \" đang ngủ...\");\n    }\n    \n    // Abstract method - phải được implement bởi subclass\n    public abstract void makeSound();\n    \n    public abstract void move();\n    \n    // Getter methods\n    public String getName() { return name; }\n    public int getAge() { return age; }\n}\n```\n\n### Concrete Classes implement Abstract Class\n\n```java\npublic class Dog extends Animal {\n    private String breed;\n    \n    public Dog(String name, int age, String breed) {\n        super(name, age);\n        this.breed = breed;\n    }\n    \n    @Override\n    public void makeSound() {\n        System.out.println(name + \" sủa: Gâu gâu!\");\n    }\n    \n    @Override\n    public void move() {\n        System.out.println(name + \" chạy bằng 4 chân.\");\n    }\n    \n    // Phương thức riêng của Dog\n    public void fetch() {\n        System.out.println(name + \" đang đi lấy bóng.\");\n    }\n    \n    public String getBreed() { return breed; }\n}\n```\n\n```java\npublic class Bird extends Animal {\n    private boolean canFly;\n    \n    public Bird(String name, int age, boolean canFly) {\n        super(name, age);\n        this.canFly = canFly;\n    }\n    \n    @Override\n    public void makeSound() {\n        System.out.println(name + \" hót: Chip chip!\");\n    }\n    \n    @Override\n    public void move() {\n        if (canFly) {\n            System.out.println(name + \" bay trên trời.\");\n        } else {\n            System.out.println(name + \" đi bộ.\");\n        }\n    }\n    \n    public void fly() {\n        if (canFly) {\n            System.out.println(name + \" đang bay!\");\n        } else {\n            System.out.println(name + \" không thể bay.\");\n        }\n    }\n    \n    public boolean canFly() { return canFly; }\n}\n```\n\n### Interface\n\n```java\n// Interface - định nghĩa contract\npublic interface Flyable {\n    void fly();\n    void land();\n    \n    // Default method (Java 8+)\n    default void takeOff() {\n        System.out.println(\"Cất cánh...\");\n    }\n    \n    // Static method (Java 8+)\n    static void showFlightInfo() {\n        System.out.println(\"Thông tin về khả năng bay.\");\n    }\n}\n\npublic interface Swimmable {\n    void swim();\n    void dive();\n}\n```\n\n### Class implement Interface\n\n```java\npublic class Duck extends Animal implements Flyable, Swimmable {\n    public Duck(String name, int age) {\n        super(name, age);\n    }\n    \n    @Override\n    public void makeSound() {\n        System.out.println(name + \" kêu: Quạc quạc!\");\n    }\n    \n    @Override\n    public void move() {\n        System.out.println(name + \" bơi trong nước.\");\n    }\n    \n    @Override\n    public void fly() {\n        System.out.println(name + \" bay thấp trên mặt nước.\");\n    }\n    \n    @Override\n    public void land() {\n        System.out.println(name + \" hạ cánh xuống nước.\");\n    }\n    \n    @Override\n    public void swim() {\n        System.out.println(name + \" bơi trong ao.\");\n    }\n    \n    @Override\n    public void dive() {\n        System.out.println(name + \" lặn xuống đáy ao.\");\n    }\n}\n```\n\n## Demo tổng hợp\n\n```java\npublic class OOPDemo {\n    public static void main(String[] args) {\n        // Encapsulation\n        BankAccount account = new BankAccount(\"123456\", \"Nguyễn Văn A\", 1000000);\n        account.deposit(500000);\n        System.out.println(\"Số dư: \" + account.getBalance());\n        \n        System.out.println(\"\\n=== INHERITANCE ===\");\n        \n        // Inheritance\n        Car car = new Car(\"Toyota\", \"Camry\", 2023, 800000000, 4, \"Xăng\");\n        car.displayInfo();\n        car.honk();\n        \n        System.out.println(\"\\n=== POLYMORPHISM ===\");\n        \n        // Polymorphism\n        Animal[] animals = {\n            new Dog(\"Buddy\", 3, \"Golden Retriever\"),\n            new Bird(\"Tweety\", 1, true),\n            new Duck(\"Donald\", 2)\n        };\n        \n        for (Animal animal : animals) {\n            animal.makeSound();\n            animal.move();\n            System.out.println(\"---\");\n        }\n        \n        System.out.println(\"\\n=== ABSTRACTION ===\");\n        \n        // Abstraction với Interface\n        Flyable flyable = new Duck(\"Daisy\", 1);\n        flyable.takeOff();\n        flyable.fly();\n        flyable.land();\n        \n        Flyable.showFlightInfo();\n    }\n}\n```\n\n## Kết luận\n\n4 nguyên lý cơ bản của OOP trong Java:\n\n1. **Encapsulation**: Ẩn giấu dữ liệu, chỉ cho phép truy cập qua public methods\n2. **Inheritance**: Kế thừa thuộc tính và phương thức từ class cha\n3. **Polymorphism**: Một object có thể có nhiều hình thái khác nhau\n4. **Abstraction**: Ẩn giấu chi tiết phức tạp, chỉ hiển thị tính năng cần thiết\n\n### Lợi ích của OOP:\n\n- **Code reusability**: Tái sử dụng code\n- **Maintainability**: Dễ bảo trì\n- **Scalability**: Dễ mở rộng\n- **Security**: Bảo mật dữ liệu\n- **Real-world modeling**: Mô phỏng thực tế\n\nHãy thực hành các ví dụ trên để nắm vững 4 nguyên lý OOP cơ bản!",
  "excerpt": "Tìm hiểu 4 nguyên lý cơ bản của Object-Oriented Programming trong Java: Encapsulation, Inheritance, Polymorphism và Abstraction với ví dụ thực tế.",
  "author": "TRAN NHAN",
  "category": "Java OOP",
  "tags": ["Java", "OOP", "Encapsulation", "Inheritance", "Polymorphism", "Abstraction"],
  "featuredImageUrl": "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=400&h=250&fit=crop&crop=center",
  "isPublished": true,
  "createdDate": "2024-01-16T09:00:00Z",
  "updatedDate": "2024-01-16T09:00:00Z",
  "viewCount": 980
}