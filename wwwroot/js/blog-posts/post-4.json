{
  "id": 4,
  "title": "Exception Handling trong Java: Xử Lý Lỗi An Toàn",
  "content": "# Exception Handling trong Java: Xử Lý Lỗi An Toàn\n\n## Giới thiệu về Exception Handling\n\nException Handling là cơ chế xử lý lỗi trong Java, cho phép chương trình tiếp tục chạy ngay cả khi gặp lỗi. Java sử dụng mô hình \"try-catch\" để bắt và xử lý các exception.\n\n### Tại sao cần Exception Handling?\n\n1. **Ổn định chương trình**: Tránh crash khi gặp lỗi\n2. **Thông báo lỗi rõ ràng**: Giúp debug dễ dàng\n3. **Recovery**: Có thể khôi phục từ lỗi\n4. **User experience**: Hiển thị thông báo thân thiện\n5. **Logging**: Ghi lại lỗi để phân tích\n\n### Phân loại Exception:\n\n1. **Checked Exception**: Phải xử lý (compile time)\n2. **Unchecked Exception**: Không bắt buộc xử lý (runtime)\n3. **Error**: Lỗi nghiêm trọng, thường không thể khôi phục\n\n## Cú pháp cơ bản\n\n### Try-Catch Block\n\n```java\npublic class BasicExceptionHandling {\n    public static void main(String[] args) {\n        try {\n            // Code có thể gây lỗi\n            int result = divide(10, 0);\n            System.out.println(\"Kết quả: \" + result);\n        } catch (ArithmeticException e) {\n            // Xử lý lỗi chia cho 0\n            System.out.println(\"Lỗi: Không thể chia cho 0\");\n            System.out.println(\"Chi tiết lỗi: \" + e.getMessage());\n        }\n        \n        System.out.println(\"Chương trình tiếp tục chạy...\");\n    }\n    \n    public static int divide(int a, int b) {\n        return a / b; // Có thể gây ArithmeticException\n    }\n}\n```\n\n### Try-Catch-Finally Block\n\n```java\nimport java.io.*;\n\npublic class TryCatchFinallyExample {\n    public static void main(String[] args) {\n        FileReader fileReader = null;\n        \n        try {\n            // Mở file\n            fileReader = new FileReader(\"data.txt\");\n            int data = fileReader.read();\n            System.out.println(\"Đọc được: \" + (char) data);\n            \n        } catch (FileNotFoundException e) {\n            System.out.println(\"Lỗi: Không tìm thấy file\");\n            e.printStackTrace();\n            \n        } catch (IOException e) {\n            System.out.println(\"Lỗi: Không thể đọc file\");\n            e.printStackTrace();\n            \n        } finally {\n            // Luôn được thực hiện, dù có lỗi hay không\n            if (fileReader != null) {\n                try {\n                    fileReader.close();\n                    System.out.println(\"File đã được đóng\");\n                } catch (IOException e) {\n                    System.out.println(\"Lỗi khi đóng file\");\n                }\n            }\n        }\n    }\n}\n```\n\n### Try-With-Resources (Java 7+)\n\n```java\nimport java.io.*;\n\npublic class TryWithResourcesExample {\n    public static void main(String[] args) {\n        // Tự động đóng resource\n        try (FileReader fileReader = new FileReader(\"data.txt\");\n             BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n            \n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                System.out.println(line);\n            }\n            \n        } catch (FileNotFoundException e) {\n            System.out.println(\"File không tồn tại\");\n        } catch (IOException e) {\n            System.out.println(\"Lỗi đọc file\");\n        }\n        // Resources tự động được đóng\n    }\n}\n```\n\n## Multiple Catch Blocks\n\n### Xử lý nhiều loại exception\n\n```java\nimport java.util.*;\n\npublic class MultipleCatchExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        try {\n            System.out.print(\"Nhập số thứ nhất: \");\n            int a = Integer.parseInt(scanner.nextLine());\n            \n            System.out.print(\"Nhập số thứ hai: \");\n            int b = Integer.parseInt(scanner.nextLine());\n            \n            int result = divide(a, b);\n            System.out.println(\"Kết quả: \" + result);\n            \n        } catch (NumberFormatException e) {\n            System.out.println(\"Lỗi: Vui lòng nhập số hợp lệ\");\n            \n        } catch (ArithmeticException e) {\n            System.out.println(\"Lỗi: Không thể chia cho 0\");\n            \n        } catch (Exception e) {\n            System.out.println(\"Lỗi không xác định: \" + e.getMessage());\n            \n        } finally {\n            scanner.close();\n        }\n    }\n    \n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Chia cho 0\");\n        }\n        return a / b;\n    }\n}\n```\n\n### Multi-Catch (Java 7+)\n\n```java\npublic class MultiCatchExample {\n    public static void main(String[] args) {\n        try {\n            // Code có thể gây nhiều loại lỗi\n            processData();\n            \n        } catch (FileNotFoundException | IOException e) {\n            // Xử lý chung cho FileNotFoundException và IOException\n            System.out.println(\"Lỗi file: \" + e.getMessage());\n            \n        } catch (NumberFormatException | IllegalArgumentException e) {\n            // Xử lý chung cho NumberFormatException và IllegalArgumentException\n            System.out.println(\"Lỗi dữ liệu: \" + e.getMessage());\n            \n        } catch (Exception e) {\n            // Xử lý các lỗi khác\n            System.out.println(\"Lỗi không xác định: \" + e.getMessage());\n        }\n    }\n    \n    public static void processData() throws IOException {\n        // Simulate file operations\n        throw new FileNotFoundException(\"File not found\");\n    }\n}\n```\n\n## Throwing Exceptions\n\n### Throw và Throws\n\n```java\npublic class ThrowingExceptionsExample {\n    \n    // Method có thể throw exception\n    public static void validateAge(int age) throws IllegalArgumentException {\n        if (age < 0) {\n            throw new IllegalArgumentException(\"Tuổi không thể âm\");\n        }\n        if (age > 150) {\n            throw new IllegalArgumentException(\"Tuổi không hợp lệ\");\n        }\n        System.out.println(\"Tuổi hợp lệ: \" + age);\n    }\n    \n    // Method throw checked exception\n    public static void readFile(String fileName) throws FileNotFoundException {\n        if (fileName == null || fileName.isEmpty()) {\n            throw new FileNotFoundException(\"Tên file không hợp lệ\");\n        }\n        // Simulate file reading\n        System.out.println(\"Đọc file: \" + fileName);\n    }\n    \n    public static void main(String[] args) {\n        try {\n            // Test validateAge\n            validateAge(25);\n            validateAge(-5); // Sẽ throw exception\n            \n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Lỗi validation: \" + e.getMessage());\n        }\n        \n        try {\n            // Test readFile\n            readFile(\"data.txt\");\n            readFile(\"\"); // Sẽ throw exception\n            \n        } catch (FileNotFoundException e) {\n            System.out.println(\"Lỗi file: \" + e.getMessage());\n        }\n    }\n}\n```\n\n## Custom Exceptions\n\n### Tạo Custom Exception\n\n```java\n// Custom checked exception\nclass InsufficientFundsException extends Exception {\n    private double amount;\n    \n    public InsufficientFundsException(double amount) {\n        super(\"Số dư không đủ. Cần: \" + amount);\n        this.amount = amount;\n    }\n    \n    public double getAmount() {\n        return amount;\n    }\n}\n\n// Custom unchecked exception\nclass InvalidAccountException extends RuntimeException {\n    private String accountNumber;\n    \n    public InvalidAccountException(String accountNumber) {\n        super(\"Tài khoản không hợp lệ: \" + accountNumber);\n        this.accountNumber = accountNumber;\n    }\n    \n    public String getAccountNumber() {\n        return accountNumber;\n    }\n}\n\n// Bank Account class sử dụng custom exceptions\nclass BankAccount {\n    private String accountNumber;\n    private double balance;\n    \n    public BankAccount(String accountNumber, double initialBalance) {\n        if (accountNumber == null || accountNumber.isEmpty()) {\n            throw new InvalidAccountException(accountNumber);\n        }\n        this.accountNumber = accountNumber;\n        this.balance = initialBalance;\n    }\n    \n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Số tiền rút phải lớn hơn 0\");\n        }\n        \n        if (amount > balance) {\n            throw new InsufficientFundsException(amount);\n        }\n        \n        balance -= amount;\n        System.out.println(\"Rút thành công: \" + amount + \" VND\");\n    }\n    \n    public double getBalance() {\n        return balance;\n    }\n}\n\n// Demo sử dụng custom exceptions\npublic class CustomExceptionDemo {\n    public static void main(String[] args) {\n        try {\n            // Tạo tài khoản hợp lệ\n            BankAccount account = new BankAccount(\"123456789\", 1000000);\n            \n            // Rút tiền thành công\n            account.withdraw(500000);\n            System.out.println(\"Số dư còn lại: \" + account.getBalance() + \" VND\");\n            \n            // Rút tiền vượt quá số dư\n            account.withdraw(800000); // Sẽ throw InsufficientFundsException\n            \n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Lỗi: \" + e.getMessage());\n            System.out.println(\"Số tiền cần: \" + e.getAmount() + \" VND\");\n            \n        } catch (InvalidAccountException e) {\n            System.out.println(\"Lỗi tài khoản: \" + e.getMessage());\n            \n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Lỗi tham số: \" + e.getMessage());\n        }\n        \n        // Test với tài khoản không hợp lệ\n        try {\n            BankAccount invalidAccount = new BankAccount(\"\", 1000000);\n        } catch (InvalidAccountException e) {\n            System.out.println(\"Lỗi tạo tài khoản: \" + e.getMessage());\n        }\n    }\n}\n```\n\n## Exception Hierarchy\n\n### Hiểu rõ Exception Hierarchy\n\n```java\npublic class ExceptionHierarchyDemo {\n    public static void main(String[] args) {\n        // Test các loại exception khác nhau\n        \n        // 1. RuntimeException (Unchecked)\n        try {\n            int[] arr = new int[5];\n            int value = arr[10]; // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Lỗi mảng: \" + e.getMessage());\n        }\n        \n        // 2. NullPointerException (Unchecked)\n        try {\n            String str = null;\n            int length = str.length(); // NullPointerException\n        } catch (NullPointerException e) {\n            System.out.println(\"Lỗi null pointer: \" + e.getMessage());\n        }\n        \n        // 3. NumberFormatException (Unchecked)\n        try {\n            int number = Integer.parseInt(\"abc\"); // NumberFormatException\n        } catch (NumberFormatException e) {\n            System.out.println(\"Lỗi format số: \" + e.getMessage());\n        }\n        \n        // 4. Checked Exception\n        try {\n            Class.forName(\"NonExistentClass\"); // ClassNotFoundException\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"Lỗi class không tồn tại: \" + e.getMessage());\n        }\n    }\n}\n```\n\n## Best Practices\n\n### 1. Specific Exception Handling\n\n```java\n// Tốt - xử lý exception cụ thể\npublic void processFile(String fileName) {\n    try {\n        FileReader reader = new FileReader(fileName);\n        // Process file\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File không tồn tại: \" + fileName);\n    } catch (IOException e) {\n        System.out.println(\"Lỗi đọc file: \" + e.getMessage());\n    }\n}\n\n// Tránh - xử lý exception chung\npublic void processFileBad(String fileName) {\n    try {\n        FileReader reader = new FileReader(fileName);\n        // Process file\n    } catch (Exception e) {\n        System.out.println(\"Có lỗi xảy ra\"); // Không rõ ràng\n    }\n}\n```\n\n### 2. Resource Management\n\n```java\n// Tốt - sử dụng try-with-resources\npublic void readFile(String fileName) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.out.println(\"Lỗi đọc file: \" + e.getMessage());\n    }\n    // Resource tự động được đóng\n}\n\n// Tránh - quên đóng resource\npublic void readFileBad(String fileName) {\n    BufferedReader reader = null;\n    try {\n        reader = new BufferedReader(new FileReader(fileName));\n        // Process file\n    } catch (IOException e) {\n        System.out.println(\"Lỗi đọc file\");\n    }\n    // Quên đóng reader!\n}\n```\n\n### 3. Logging Exceptions\n\n```java\nimport java.util.logging.*;\n\npublic class ExceptionLoggingExample {\n    private static final Logger logger = Logger.getLogger(ExceptionLoggingExample.class.getName());\n    \n    public void processData(String data) {\n        try {\n            int number = Integer.parseInt(data);\n            System.out.println(\"Số: \" + number);\n            \n        } catch (NumberFormatException e) {\n            // Log exception với level và message\n            logger.log(Level.WARNING, \"Lỗi parse số: \" + data, e);\n            \n            // Hoặc sử dụng logger.severe() cho lỗi nghiêm trọng\n            // logger.severe(\"Lỗi nghiêm trọng: \" + e.getMessage());\n            \n            System.out.println(\"Dữ liệu không hợp lệ: \" + data);\n        }\n    }\n}\n```\n\n### 4. Exception Chaining\n\n```java\npublic class ExceptionChainingExample {\n    \n    public void processFile(String fileName) throws ProcessingException {\n        try {\n            FileReader reader = new FileReader(fileName);\n            // Process file\n            \n        } catch (FileNotFoundException e) {\n            // Wrap exception với thông tin bổ sung\n            throw new ProcessingException(\n                \"Không thể xử lý file: \" + fileName, e\n            );\n        } catch (IOException e) {\n            throw new ProcessingException(\n                \"Lỗi đọc file: \" + fileName, e\n            );\n        }\n    }\n}\n\n// Custom exception với chaining\nclass ProcessingException extends Exception {\n    public ProcessingException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```\n\n## Advanced Exception Handling\n\n### Exception Propagation\n\n```java\npublic class ExceptionPropagationExample {\n    \n    public static void main(String[] args) {\n        try {\n            method1();\n        } catch (Exception e) {\n            System.out.println(\"Exception được bắt ở main: \" + e.getMessage());\n            System.out.println(\"Stack trace:\");\n            e.printStackTrace();\n        }\n    }\n    \n    public static void method1() throws Exception {\n        System.out.println(\"Method1 called\");\n        method2();\n    }\n    \n    public static void method2() throws Exception {\n        System.out.println(\"Method2 called\");\n        method3();\n    }\n    \n    public static void method3() throws Exception {\n        System.out.println(\"Method3 called\");\n        throw new Exception(\"Exception từ method3\");\n    }\n}\n```\n\n### Suppressed Exceptions\n\n```java\npublic class SuppressedExceptionExample {\n    \n    public static void main(String[] args) {\n        try {\n            processWithResources();\n        } catch (Exception e) {\n            System.out.println(\"Main exception: \" + e.getMessage());\n            \n            // In suppressed exceptions\n            Throwable[] suppressed = e.getSuppressed();\n            for (Throwable t : suppressed) {\n                System.out.println(\"Suppressed: \" + t.getMessage());\n            }\n        }\n    }\n    \n    public static void processWithResources() throws Exception {\n        try (AutoCloseableResource resource = new AutoCloseableResource()) {\n            // Simulate work\n            throw new Exception(\"Main exception\");\n        }\n        // Resource.close() sẽ throw suppressed exception\n    }\n}\n\nclass AutoCloseableResource implements AutoCloseable {\n    @Override\n    public void close() throws Exception {\n        throw new Exception(\"Resource close exception\");\n    }\n}\n```\n\n## Kết luận\n\nException Handling trong Java cung cấp:\n\n1. **Cơ chế xử lý lỗi mạnh mẽ**: Try-catch-finally\n2. **Type safety**: Checked và Unchecked exceptions\n3. **Resource management**: Try-with-resources\n4. **Custom exceptions**: Tạo exception riêng\n5. **Exception chaining**: Kết nối các exception\n\n### Best Practices:\n\n- **Xử lý exception cụ thể** thay vì Exception chung\n- **Sử dụng try-with-resources** cho resource management\n- **Log exceptions** để debug\n- **Tạo custom exceptions** khi cần\n- **Không bỏ qua exceptions** (empty catch blocks)\n- **Sử dụng finally** cho cleanup\n- **Exception chaining** để giữ nguyên stack trace\n\n### Lưu ý quan trọng:\n\n- **Checked exceptions** phải được xử lý hoặc declare\n- **Unchecked exceptions** không bắt buộc xử lý\n- **Finally block** luôn được thực hiện\n- **Try-with-resources** tự động đóng resources\n- **Exception propagation** cho phép exception lan truyền\n\nHãy thực hành các ví dụ trên để nắm vững Exception Handling trong Java!",
  "excerpt": "Tìm hiểu Exception Handling trong Java - cơ chế xử lý lỗi an toàn với try-catch, custom exceptions và best practices.",
  "author": "TRAN NHAN",
  "category": "Java Exception",
  "tags": ["Java", "Exception Handling", "Try-Catch", "Error Handling"],
  "featuredImageUrl": "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=400&h=250&fit=crop&crop=center",
  "isPublished": true,
  "createdDate": "2024-01-22T11:15:00Z",
  "updatedDate": "2024-01-22T11:15:00Z",
  "viewCount": 850
}